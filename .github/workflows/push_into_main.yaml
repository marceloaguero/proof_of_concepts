name: Push into main branch

on:
  push:
    branches:
      - main

env:
  GOTOOLCHAIN: local

env:
  REGION: us-east1
  REGISTRY: us-east1-docker.pkg.dev
  REPOSITORY: poc
  IMAGE_BASE_NAME: hello

jobs:
  build_push_deploy:
    name: Build, Push, and Deploy to Cloud Run
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Using some data from github repo, build the docker image name (and tag)
      # Also, build Cloud Run service name
      - name: Set up Docker image name and Cloud Run service name
        run: |
          COMMIT_NUMBER=$(git rev-list --count HEAD)
          COMMIT_SHA=$(git rev-parse --short HEAD)
          IMAGE_TAG_SUFFIX="${COMMIT_NUMBER}-${COMMIT_SHA}"

          echo "SERVICE_NAME=${{ env.IMAGE_BASE_NAME }}-qa" >> $GITHUB_ENV
          echo "IMAGE_NAME=${{ env.REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_BASE_NAME }}:qa-${IMAGE_TAG_SUFFIX}" >> $GITHUB_ENV

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: _json_key
          password: ${{ secrets.GCP_SA_KEY }}

      - name: Build and push docker image
        uses: docker/build-push-action@v5.4.0
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_NAME }}

      - name: Deploy into Google Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          region: ${{ env.REGION }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service: ${{ env.SERVICE_NAME }}
          image: ${{ env.IMAGE_NAME }}
          flags: '--allow-unauthenticated'

      - name: Show Cloud Run URL
        run: |
          echo "URL: ${{ steps.deploy.outputs.url }}"

  # We need to remove unused services from Cloud Run.
  # So, we need to know the name of the branch that originates the merge into main.
  # Then, call Cloud Run to delete the service (ephemeral services use branch names).
  cleanup_ephemeral:
    needs: build_push_deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read

    steps:
      - name: Get Source Branch and build Service name
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the latest merge commit SHA
          MERGE_COMMIT="${{ github.sha }}"
          echo "Merge Commit: $MERGE_COMMIT"

          # Fetch closed PRs from GitHub API and filter the one matching the merge commit
          PR_INFO=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
                          -H "Accept: application/vnd.github.v3+json" \
                          "https://api.github.com/repos/${{ github.repository }}/pulls?state=closed")

          # Debugging: Print raw API response
          echo "PR_INFO: $PR_INFO"

          # Extract the source branch using jq
          SOURCE_BRANCH=$(echo "$PR_INFO" | jq -r --arg MERGE_COMMIT "$MERGE_COMMIT" \
              'map(select(.merge_commit_sha == $MERGE_COMMIT)) | .[0].head.ref // empty')

          # Validate that we got a branch
          if [ -z "$SOURCE_BRANCH" ] || [ "$SOURCE_BRANCH" == "null" ]; then
            echo "Could not determine source branch."
            exit 1
          fi

          echo "Source Branch: $SOURCE_BRANCH"

          # Generate the Cloud Run Service name from the branch name
          IMAGE_TAG_BRANCH=$(echo "$SOURCE_BRANCH" | tr '[:upper:]' '[:lower:]' | tr '/' '-' | cut -c1-50)
          DELETE_SERVICE_NAME="${{ env.IMAGE_BASE_NAME }}-${IMAGE_TAG_BRANCH}"
          
          echo "Service to delete: $DELETE_SERVICE_NAME"
          echo "DELETE_SERVICE_NAME=${DELETE_SERVICE_NAME}" >> $GITHUB_ENV

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
           credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Delete ephemeral Cloud Run Service
        run: |
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
          gcloud run services delete ${{ env.DELETE_SERVICE_NAME }} --region ${{ env.REGION }} --quiet || echo "Service not found, skipping."
