name: Push into feature branch

on:
  push:
    branches:
      - 'feat/**'
      - 'feature/**'
      - 'features/**'

jobs:
  # Split build and lint into a few different jobs so they can run in parallel.
  # build:
  #   name: Build
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Setup Go
  #     uses: actions/setup-go@v5
  #     with:
  #       go-version: 'stable'
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #   - name: Build code
  #     # Use find to build all modules. '-execdir ... ;' doesn't set an exit code
  #     # based on command results. So, create a file if a build fails and check
  #     # if the file exists to set the right exit code.
  #     run: |
  #       ROOT_DIR=$(pwd) \
  #       find . -name go.mod -execdir sh -c 'go build ./... || touch $ROOT_DIR/build_failed.txt' \; ; \
  #       test ! -f build_failed.txt
  # lint:
  #   name: Lint
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Setup Go
  #     uses: actions/setup-go@v5
  #     with:
  #       go-version: 'stable'
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #   # #4374 Pin goimports at v0.22.0
  #   - name: Install goimports
  #     run: go install golang.org/x/tools/cmd/goimports@v0.22.0
  #   - run: goimports -w .
  #   - name: Run go mod tidy on all modules
  #     run: find . -name go.mod -execdir go mod tidy \;
  #   - name: Remove any toolchain lines
  #     run: find . -name go.mod -execdir go get toolchain@none \;
  #   # If there are any diffs from goimports or go mod tidy, fail.
  #   - name: Verify no changes from goimports and go mod tidy.
  #     run: |
  #       if [ -n "$(git status --porcelain)" ]; then
  #         echo 'To fix this check, run "goimports -w . && find . -name go.mod -execdir go mod tidy \;"'
  #         git status # Show the files that failed to pass the check.
  #         exit 1
  #       fi
  #   - name: shellcheck
  #     run: find . -name "*.sh" -exec shellcheck {} \;
  # vet:
  #   name: Vet
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Setup Go
  #     uses: actions/setup-go@v5
  #     with:
  #       go-version: 'stable'
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #   - name: go vet
  #     # Use find to build all modules. '-execdir ... ;' doesn't set an exit code
  #     # based on command results. So, create a file if a build fails and check
  #     # if the file exists to set the right exit code.
  #     run: |
  #       ROOT_DIR=$(pwd) \
  #       find . -name go.mod -execdir sh -c 'go vet ./... || touch $ROOT_DIR/vet_failed.txt' \; ; \
  #       test ! -f vet_failed.txt
  # test:
  #   name: Root tests
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Setup Go
  #       uses: actions/setup-go@v5
  #       with:
  #         go-version: 'stable'
  #
  #     - name: Check code
  #       uses: actions/checkout@v4
  #
  #     - run: go test -v

  docker_build_push:
    env:
      REGION: us-east1
      REGISTRY: us-east1-docker.pkg.dev
      REPOSITORY: poc
      IMAGE_BASE_NAME: hello
      IMAGE_ENV: dev
    name: Build docker image and push into registry
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: nelonoel/branch-name@v1.0.1

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up docker image tag
        run: |
          IMAGE_TAG_BRANCH=$(echo "$BRANCH_NAME" | tr '/' '-')

          COMMIT_NUMBER=$(git rev-list --count HEAD)
          COMMIT_SHA=$(git rev-parse --short HEAD)
          TIMESTAMP=$(date +%s)

          IMAGE_TAG_SUFFIX="${COMMIT_NUMBER}"

          echo "SERVICE_NAME=${{ env.REPOSITORY }}-${{ env.IMAGE_BASE_NAME }}-${{ env.IMAGE_ENV }}-${IMAGE_TAG_BRANCH}" >> $GITHUB_ENV
          echo "IMAGE_NAME=${{ env.REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_BASE_NAME }}:${{ env.IMAGE_ENV }}-${IMAGE_TAG_BRANCH}-${IMAGE_TAG_SUFFIX}" >> $GITHUB_ENV

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: _json_key
          password: ${{ secrets.GCP_SA_KEY }}

      - name: Build and push docker image
        uses: docker/build-push-action@v5.4.0
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_NAME }}

      - name: Show Deploy Parameters
        run: |
          echo "region: ${{ env.REGION }}"
          echo "service: ${{ env.SERVICE_NAME }}"
          echo "image: ${{ env.IMAGE_NAME }}"

      - name: Deploy into Google Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          region: ${{ env.REGION }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service: ${{ env.SERVICE_NAME }}
          image: ${{ env.IMAGE_NAME }}
          flags: '--allow-unauthenticated'

      - name: Show Cloud Run URL
        run: |
          echo "URL: ${{ steps.deploy.outputs.url }}"
